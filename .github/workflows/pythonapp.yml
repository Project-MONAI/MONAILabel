# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  # automatically cancel the previously triggered workflows when there's a newer version
  group: build-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install -r requirements-dev.txt
      - name: Clean
        run: |
          $(pwd)/runtests.sh --clean
      - name: ISort
        run: |
          $(pwd)/runtests.sh --isort
      - name: Black
        run: |
          $(pwd)/runtests.sh --black
      - name: Flake8
        run: |
          $(pwd)/runtests.sh --flake8
      - name: PyType
        run: |
          echo $(pwd)/runtests.sh --pytype
      - name: MyPy
        run: |
          $(pwd)/runtests.sh --mypy
      - name: Unit Tests
        run: |
          $(pwd)/runtests.sh --unittests
      - name: Upload coverage
        uses: codecov/codecov-action@v1
        with:
          fail_ci_if_error: false
          file: ./coverage.xml

  packaging:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: cache weekly timestamp
        id: pip-cache
        run: |
          echo "::set-output name=datew::$(date '+%Y-%V')"
      - name: cache for pip
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            ~/.cache/pip
            ~/.cache/torch
          key: ${{ runner.os }}-pip-${{ steps.pip-cache.outputs.datew }}
      - name: Install dependencies
        run: |
          python -m pip install --user --upgrade pip setuptools wheel
          python -m pip install torch>=1.5 torchvision
      - name: Build Package
        run: |
          python setup.py sdist bdist_wheel
      - name: Verify Package
        run: |
          tmp_dir=$(mktemp -d)
          cp dist/monailabel* "$tmp_dir"
          rm -r build monailabel*.egg-info

          # install from tar.gz
          python -m pip install "$tmp_dir"/monailabel*.tar.gz
          python -c 'import monailabel; monailabel.print_config()' 2>&1 | grep -iv "unknown"
          python -c 'import monailabel; print(monailabel.__file__)'
          python -m pip uninstall -y monailabel

          # install from wheel
          python -m pip install "$tmp_dir"/monailabel*.whl
          python -c 'import monailabel; monailabel.print_config()' 2>&1 | grep -iv "unknown"
          python -c 'import monailabel; print(monailabel.__file__)'

          # install test utilities
          python -m pip install pytest

          # start the monailabel server in the background and run the integration tests
          ./runtests.sh --net

          # cleanup
          python -m pip uninstall -y monailabel
          rm -r "$tmp_dir"
        env:
          shell: bash

  build-docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: cache weekly timestamp
        id: pip-cache
        run: |
          echo "::set-output name=datew::$(date '+%Y-%V')"
      - name: cache for pip
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            ~/.cache/pip
            ~/.cache/torch
          key: ${{ runner.os }}-pip-${{ steps.pip-cache.outputs.datew }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          python -m pip install -r docs/requirements.txt
      - name: Make html
        run: |
          export PYTHONPATH=$(pwd)
          cd docs/
          make clean
          make html 2>&1 | tee tmp_log
          if [[ $(grep -c "WARNING:" tmp_log) != 0 ]]; then echo "found warnings"; grep "WARNING:" tmp_log; exit 1; fi
        shell: bash
