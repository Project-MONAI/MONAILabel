name: release
# generating and testing package artifacts from the main branch

on:
  push:
    branches:
      - main
    tags:
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install -r requirements-dev.txt
      - name: Clean
        run: |
          $(pwd)/runtests.sh --clean
      - name: ISort
        run: |
          $(pwd)/runtests.sh --isort
      - name: Black
        run: |
          $(pwd)/runtests.sh --black
      - name: Flake8
        run: |
          $(pwd)/runtests.sh --flake8
      - name: PyType
        run: |
          echo Skipping this test
      - name: MyPy
        run: |
          $(pwd)/runtests.sh --mypy
      - name: Unit Tests
        run: |
          $(pwd)/runtests.sh --unittests --coverage
      - name: Coverage
        run: |
          coverage xml
      - name: Upload coverage
        uses: codecov/codecov-action@v1
        with:
          fail_ci_if_error: false
          file: ./coverage.xml

  packaging:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: cache weekly timestamp
        id: pip-cache
        run: |
          echo "::set-output name=datew::$(date '+%Y-%V')"
      - name: cache for pip
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            ~/.cache/pip
            ~/.cache/torch
          key: ${{ runner.os }}-pip-${{ steps.pip-cache.outputs.datew }}
      - name: Install dependencies
        run: |
          python -m pip install --user --upgrade pip setuptools wheel twine
          python -m pip install torch>=1.5 torchvision
      - name: Test source archive and wheel file
        run: |
          root_dir=$PWD
          echo "$root_dir"

          # build tar.gz and wheel
          python setup.py check -m -s
          python setup.py sdist bdist_wheel
          python -m twine check dist/*

          # move packages to a temp dir
          tmp_dir=$(mktemp -d)
          cp dist/monailabel* "$tmp_dir"
          rm -r build dist monailabel.egg-info
          cd "$tmp_dir"
          ls -al

          # install from wheel
          python -m pip install monailabel*.whl
          python -c 'import monailabel; monailabel.print_config()' 2>&1 | grep -iv "unknown"
          python -c 'import monailabel; print(monailabel.__file__)'
          python -m pip uninstall -y monailabel
          rm monailabel*.whl

          # install from tar.gz
          name=$(ls *.tar.gz | head -n1)
          echo $name
          python -m pip install $name
          python -c 'import monailabel; monailabel.print_config()' 2>&1 | grep -iv "unknown"
          python -c 'import monailabel; print(monailabel.__file__)'

          # install test utilities
          python -m pip install pytest

          # start the monailabel server in the background
          # and run the integration tests
          $root_dir/runtests.sh --net
        env:
          shell: bash

  build-docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: cache weekly timestamp
        id: pip-cache
        run: |
          echo "::set-output name=datew::$(date '+%Y-%V')"
      - name: cache for pip
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            ~/.cache/pip
            ~/.cache/torch
          key: ${{ runner.os }}-pip-${{ steps.pip-cache.outputs.datew }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          python -m pip install -r docs/requirements.txt
      - name: Make html
        run: |
          export PYTHONPATH=$(pwd)
          cd docs/
          make clean
          make html 2>&1 | tee tmp_log
          if [[ $(grep -c "WARNING:" tmp_log) != 0 ]]; then echo "found warnings"; grep "WARNING:" tmp_log; exit 1; fi
        shell: bash
