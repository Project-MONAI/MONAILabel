trigger:
- main

# no PR triggers: only committers to the main branch should be able to trigger these builds
pr: 
  - main

stages:
- stage: 'Test'
  jobs:
  - job: Run-Tests
    pool:
      vmImage: ubuntu-20.04
      strategy:
        matrix:
          Python36:
            python.version: '3.6'
          Python37:
            python.version: '3.7'
          Python38:
            python.version: '3.8'
          Python39:
            python.version: '3.9'
        maxParallel: 1
    steps:
    - script: |
        sudo apt install  -y python3-pip
        python3 -m pip install --upgrade pip wheel
        python3 -m pip install -r requirements-dev.txt
      displayName: 'Install dependencies'
    - script: |
        $(pwd)/runtests.sh --clean
      displayName: 'Clean'
    - script: |
        $(pwd)/runtests.sh --isort
      displayName: 'iSort'
    - script: |
        $(pwd)/runtests.sh --black
      displayName: 'Black'
    - script: |
        $(pwd)/runtests.sh --flake8
      displayName: 'Flake8'
    - script: |
        $(pwd)/runtests.sh --pytype
      displayName: 'PyType'
    - script: |
        $(pwd)/runtests.sh --mypy
      displayName: 'MyPy'
    - script: |
        $(pwd)/runtests.sh --unittests --coverage
      displayName: 'Unit tests'
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: ./coverage.xml
      displayName: 'Publish Code Coverage Results'

- stage: Build
  jobs:
  - job: Package
  pool:
    vmImage: ubuntu-20.04
    strategy:
      matrix:
        Python38:
          python.version: '3.8'
    steps:
      - script: |
          python3 -m pip install --user --upgrade pip setuptools wheel twine
          python3 -m pip install torch>=1.5 torchvision
        displayName: 'Install dependencies'
      - script: |
          root_dir=$PWD
          echo "$root_dir"

          # build tar.gz and wheel
          export BUILD_OHIF=true
          python setup.py check -m -s
          python setup.py sdist bdist_wheel
          python -m twine check dist/*

          # move packages to a temp dir
          tmp_dir=$(mktemp -d)
          cp dist/monailabel* "$tmp_dir"
          rm -r build dist monailabel.egg-info
          cd "$tmp_dir"
          ls -al

          # install from wheel
          python -m pip install monailabel*.whl
          python -c 'import monailabel; monailabel.print_config()' 2>&1 | grep -iv "unknown"
          python -c 'import monailabel; print(monailabel.__file__)'
          python -m pip uninstall -y monailabel
          rm monailabel*.whl

          # install from tar.gz
          name=$(ls *.tar.gz | head -n1)
          echo $name
          python -m pip install $name
          python -c 'import monailabel; monailabel.print_config()' 2>&1 | grep -iv "unknown"
          python -c 'import monailabel; print(monailabel.__file__)'

          # install test utilities
          python -m pip install pytest

          # start the monailabel server in the background and run the integration tests
          $root_dir/runtests.sh --net
        env:
          shell: bash
      - script: |
          python -m pip install -r docs/requirements.txt
          export PYTHONPATH=$(pwd)
          cd docs/
          make clean
          make html 2>&1 | tee tmp_log
          if [[ $(grep -c "WARNING:" tmp_log) != 0 ]]; then echo "found warnings"; grep "WARNING:" tmp_log; exit 1; fi
        displayName: 'Build Docs'