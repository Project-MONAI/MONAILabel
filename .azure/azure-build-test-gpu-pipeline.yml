trigger: none
  
stages:
  - stage: 'Test'
    jobs:
    - job: RunTests
      pool: "Monai VMSS"
      strategy:
        matrix:
          Python3.8:
            python.version: '3.8'
        maxParallel: 2
      steps:
      # - task: UsePythonVersion@0
      #   inputs:
      #     versionSpec: $(python.version)
      - script: |
          sudo apt update && sudo apt install -y python3-pip python-is-python3
          python3 -m pip install --upgrade pip wheel
          python3 -m pip install -r requirements-dev.txt
        displayName: 'Install dependencies'
      - bash:  $(pwd)/runtests.sh --clean
        displayName: 'Clean'
      - bash: $(pwd)/runtests.sh --isort
        displayName: 'iSort'
      - bash: $(pwd)/runtests.sh --black
        displayName: 'Black'
      - script: |
          $(pwd)/runtests.sh --flake8
        displayName: 'Flake8'
      - bash:  $(pwd)/runtests.sh --pytype
        displayName: 'PyType'
      - bash:  $(pwd)/runtests.sh --mypy
        displayName: 'MyPy'
      - bash:  $(pwd)/runtests.sh --unittests --coverage
        displayName: 'Unit tests'
      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: ./coverage.xml
        displayName: 'Publish Code Coverage Results'
  
  - stage: Build
    jobs:
    - job: Package
    pool:
      vmImage: ubuntu-20.04
      strategy:
        matrix:
          Python38:
            python.version: '3.8'
      steps:
        - script: |
            python3 -m pip install --user --upgrade pip setuptools wheel twine
            python3 -m pip install torch>=1.5 torchvision
          displayName: 'Install dependencies'
        - script: |
            root_dir=$PWD
            echo "$root_dir"
  
            # build tar.gz and wheel
            export BUILD_OHIF=true
            python3 setup.py check -m -s
            python3 setup.py sdist bdist_wheel
            python3 -m twine check dist/*
  
            # move packages to a temp dir
            tmp_dir=$(mktemp -d)
            cp dist/monailabel* "$tmp_dir"
            rm -r build dist monailabel.egg-info
            cd "$tmp_dir"
            ls -al
  
            # install from wheel
            python3 -m pip install monailabel*.whl
            python3 -c 'import monailabel; monailabel.print_config()' 2>&1 | grep -iv "unknown"
            python3 -c 'import monailabel; print(monailabel.__file__)'

            # install test utilities
            python3 -m pip install pytest
  
            # start the monailabel server in the background and run the integration tests
            $root_dir/runtests.sh --net
          env:
            shell: bash
