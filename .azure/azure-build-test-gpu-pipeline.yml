trigger: none
pr: none

stages:
  - stage: 'Build'
    jobs:
#      - job: Tests
#        timeoutInMinutes: 60
#        pool: "Monai VMSS"
#        container:
#          image: nvcr.io/nvidia/pytorch:22.03-py3
#          options: --gpus all
#        steps:
#          - bash: |
#              apt update
#              apt-get install openslide-tools icu-devtools -y
#              python -m pip install --user --upgrade pip setuptools wheel
#              python -m pip install -r requirements-dev.txt
#              python -m pip install pytest-azurepipelines
#            displayName: 'Install dependencies'
#          - bash: $(pwd)/runtests.sh --clean
#            displayName: 'Clean'
#          - bash: python -m pre_commit run --all-files
#            displayName: 'PreCommit'
#          - bash: $(pwd)/runtests.sh --unittests
#            displayName: 'Unit tests'
#          - task: UseDotNet@2
#            displayName: 'Use .NET Core sdk'
#            inputs:
#              packageType: sdk
#              version: 3.1.x
#              installationPath: $(Agent.ToolsDirectory)/dotnet
#          - task: PublishTestResults@2
#            condition: succeededOrFailed()
#            inputs:
#              testResultsFiles: '**/test-*.xml'
#              testRunTitle: 'Publish test results for Python $(python.version)'
#            displayName: 'Publish Test Results'
#          - task: PublishCodeCoverageResults@1
#            inputs:
#              codeCoverageTool: Cobertura
#              summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
#            displayName: 'Publish Code Coverage Results'

      - job: Package
        timeoutInMinutes: 30
        pool: "Monai VMSS"
#        container:
#          image: nvcr.io/nvidia/pytorch:22.03-py3
#          options: --gpus all
        steps:
          - script: |
              sudo killall apt apt-get | echo killing existing apt
              sudo rm -rf /var/lib/apt/lists/lock
              sudo rm -rf /var/cache/apt/archives/lock
              sudo rm -rf /var/lib/dpkg/lock
              sudo dpkg --configure -a
              sudo apt-get update --fix-missing -y
              sudo apt-get install -f -y
            displayName: 'Fix Lock (Hack)'
          - bash: |
              sudo apt update
              sudo apt-get install openslide-tools -y
              sudo ./plugins/ohif/requirements.sh
              yarn --version
              python -m pip install --user --upgrade pip setuptools wheel
            displayName: 'Install dependencies'
          - bash: |
              python setup.py sdist bdist_wheel
              rm -r build monailabel*.egg-info
            displayName: 'Build Package'
          - bash: |
              tmp_dir=$(mktemp -d)
              cp dist/monailabel* "$tmp_dir"

              # install from tar.gz
              python -m pip install "$tmp_dir"/monailabel*.tar.gz
              python -c 'import monailabel; monailabel.print_config()' 2>&1 | grep -iv "unknown"
              python -c 'import monailabel; print(monailabel.__file__)'

              # cleanup
              python -m pip uninstall -y monailabel
              rm -r "$tmp_dir"
            displayName: 'Verify (Tar) Package'
          - bash: |
              tmp_dir=$(mktemp -d)
              cp dist/monailabel* "$tmp_dir"

              # install from wheel
              python -m pip install "$tmp_dir"/monailabel*.whl
              python -c 'import monailabel; monailabel.print_config()' 2>&1 | grep -iv "unknown"
              python -c 'import monailabel; print(monailabel.__file__)'

              # install test utilities
              python -m pip install pytest

              # start the monailabel server in the background and run the integration tests
              ./runtests.sh --net

              # cleanup
              python -m pip uninstall -y monailabel
              rm -r "$tmp_dir"
            displayName: 'Verify (Wheel) Package + Integration Tests'
